name: Pipeline

on:
  push:


env:
  containerRegistry: container-registry.cr.de-fra.ionos.com
  imageName: fdpg-webapp
  isMain: ${{ github.ref == 'refs/heads/main' }}
  isDev: ${{ github.ref == 'refs/heads/dev' }}
  nodeVersion: "18.16.1"
  NODE_ENV: "dev"


jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: "Setup Node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.nodeVersion}}
          cache: yarn

      - name: "Installing Modules"
        run: yarn install

      - name: "Unit Testing"
        run: yarn test:unit

      - name: "Publish Test Results"
        uses: mikepenz/action-junit-report@v3
        if: success() || failure()  # always run even if the previous step fails
        with:
          report_paths: '**/reports/junit.xml'
          fail_on_failure: true

      - name: "Publish Code Coverage"
        uses: 5monkeys/cobertura-action@master
        if: ${{github.event_name == 'pull_request' }}
        with:
          path: '**/reports/coverage/cobertura-coverage.xml'
          minimum_coverage: 75
          fail_below_threshold: false
          only_changed_files: true

      - name: "Yarn Build for env: ${{ env.NODE_ENV }}"
        if: ${{ env.isDev == 'true' }}
        run: yarn run build --mode ${{ env.NODE_ENV }}

      - name: "Yarn Build for env: ${{ env.NODE_ENV }}"
        if: ${{ env.NODE_ENV == 'print' }}
        run: yarn run build:print --mode prod


  build_dev:
    uses: ./.github/workflows/build-and-publish.template.yaml
    if: ${{ env.isMain == 'false' }}
    needs: verify
    with:
      nodeEnvironment: "dev"
      nodeVersion: ${{ env.nodeVersion }}


  build_prelive:
    uses: ./.github/workflows/build-and-publish.template.yaml
    if: ${{ env.isMain == 'true' }}
    needs: verify
    with:
      nodeEnvironment: "prelive"
      nodeVersion: ${{ env.nodeVersion }}


  build_main:
    uses: ./.github/workflows/build-and-publish.template.yaml
    if: ${{ env.isMain == 'true' }}
    needs: verify
    with:
      nodeEnvironment: "main"
      nodeVersion: ${{ env.nodeVersion }}
